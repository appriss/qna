-klass = ""
-if logged_in? && question.tags.detect { |tag| current_user.preferred_tags_on(current_group).include?(tag) }
  - klass = "highlight"

-title = h(question.title)
-if question.closed
  -title += " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

-owner = nil
- if question.last_target_id.present?
  - last_target_id = question.last_target_id
  - last_target_date = question.last_target_date
  - owner = question.last_target_user
  - if question.last_target_type != 'Question'
    - @updated = true
  - else
    - @updated = false
- else
  - last_target = question
  - last_target_date = question.updated_at
  - owner = question.user unless question.anonymous

:css
  strong.highlight { font-weight: inherit; background-color: #EEFF6F; }

%article.search.cleafix{:class => class_for_question(question)}
  .stats
    %a{:href => question_path(question)}
      .top
        .votes
          .mini-counts= question.votes_average
          .text votes
        .status{:class => [question.answers_count==0 ? "unanswered" : "", question.accepted ? "accepted" : ""]}
          .mini-counts= question.answers_count
          .text answers
      %span.views #{question.views_count} views
  .summary.clearfix
    .title
      = link_to highlight(title, @highlight), question_path(question), :title => truncate(strip_tags(question.title), :length => 200)
    .markdown(style="color: black; line-height: 0.3")
      = highlight(find_and_preserve(qna_auto_link(markdown(question.body.present? ? question.body : question.title))), @highlight)
    .tags
      - question.tags.each do |tag_name|
        %a.post-tag{:href => tag_path(:id => CGI.escape(tag_name))}= tag_name
    .started
      %span.relativetime #{time_ago_in_words(last_target_date)} ago
      %a.author{:href => user_path(owner)}= owner.login
      %span.reputation-score(title="#{owner.login}'s reputation: #{format_number(owner.reputation_on(current_group))}")= format_number(owner.reputation_on(current_group))
