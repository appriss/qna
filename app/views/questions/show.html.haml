%meta{"data-js"=> 'show'}
= include_latex

- question_body = find_and_preserve(ace_auto_link(markdown(@question.body.present? ? @question.body : @question.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.tags.dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

-cache_for(:question, @question.id, @question.user == current_user ? "owner" : "" ) do
  %section#question{:class => "main-question #{@question.id}", :item_scope => '', :itemtype => "http://schema.org/Article", :vote_url => question_votes_path(@question), :question_url => question_path(@question)}
    #question-header
      %h1{:itemprop => "name"}
        = @question.title
        - if @question.closed
          = " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"
    %table
      %tbody
        %tr
          %td.votecell
            .vote
              %center
                - vote_up_toggle = (logged_in? && (current_user.vote_on(@question) || 0) > 0) ? "vote-up-on" : "vote-up-off"
                - vote_down_toggle = (logged_in? && (current_user.vote_on(@question) || 0) < 0) ? "vote-down-on" : "vote-down-off"
                - star_toggle = (logged_in? && @question.follower?(current_user)) ? "star-on" : "star-off"
                %a.vote-up{:class => vote_up_toggle}(title="This question shows research effort; it is useful and clear (click again to undo)") up vote
                %span.vote-count-post= @question.votes_average
                %a.vote-down{:class => vote_down_toggle}(title="This question does not show any research effort; it is unclear or not useful (click again to undo)") down vote
                %a.star{:class => star_toggle}(title="This is a favorite question (click again to undo)" href="#") favorite
                .favoritecount= @question.followers_count
          %td.postcell
            %div
              .post-text.markdown.description(itemprop="articleBody")= question_body
              .tags
                - @question.tags.each do |tag_name|
                  %a.post-tag{:href => tag_path(:id => CGI.escape(tag_name))}= tag_name
              %table.fw
                %tbody
                  %tr
                    %td.vt
                      .post-menu
                        = link_to "edit", edit_question_path(@question)
                        %span.lsep= "|"
                        = link_to "flag", new_question_flag_path(@question)
                        %span.lsep= "|"
                        = link_to "delete", @question, :method => :delete, :confirm => "Are you sure you want to delete this question?"
                    %td.post-signature.owner
                      .user-info
                        .user-action-time 
                          asked 
                          %span.relativetime= time_ago_in_words(@question.created_at)
                          ago
                        .user-gravatar32= avatar_img(@question.user, :size => "small")
                        .user-details
                          = pjax_link_to @question.user.display_name, "user", user_path(@question.user), {:class => "clear"}
                          %div.reputation-score(title="reputation score")= format_number(@question.user.reputation_on(current_group))
        %tr
          %td.votecell
          %td
            .comments
              %table
                %tbody
                  - @question.comments.each do |comment|
                    %tr.comment
                      %td.comment-actions
                        %table
                          %tbody
                            %tr
                              - comment_votes = comment.votes_average == 0 ? " " : comment.votes_average
                              %td.comment-score= comment_votes
                              %td &nbsp
                              -#%td 
                                = form_tag question_comment_votes_path(:comment_id => comment.id, :question_id => @question.id)
                                - vote_up_toggle = (logged_in? && (current_user.vote_on(comment) || 0) > 0) ? "vote-up-on" : "vote-up-off"
                                = hidden_field_tag "source", question_path(@question)
                                = hidden_field_tag "vote_up", "1"
                                = submit_tag "upvote", :class => "comment-up #{vote_up_toggle}", :title => "this comment adds something useful to the post"
                            %tr
                              %td &nbsp
                              %td &nbsp
                              -#%a.comment-flag(title="flag this comment as unconstructive, offensive, or spam") flag
                      %td.comment-text
                        %div
                          %span.comment-copy= find_and_preserve(ace_auto_link(markdown(comment.body), :link_users => true))
                          â€“
                          %a.comment-user(href="#")= comment.user.display_name
                          %span.comment-date #{time_ago_in_words(comment.created_at)} ago
                %tfoot
                  %tr
                    %td
                    %td.comment-form
                      %a.comments-link(title="ask author for clarification about this post" onclick="$(this).hide(); $(\"form[data-commentable='#{@question.id}']\").show('fast');") add comment
                      = form_for [@question, @comment ||= Comment.new], html: {style: "display: none", data: {commentable: @question.id}} do |f|
                        %table
                          %tbody
                            %tr
                              %td
                                = f.text_area :body, :cols => "68", :rows => "3"
                              %td
                                = f.submit

    -#.author
      %small
        %span
          = t('activerecord.attributes.question.asked_by')
        = render :partial => "users/user_mini", :locals => {:user => @question.user, :author => true}
        %time{:datetime => @question.created_at.iso8601, :itemprop => "datePublished"}
          = t("time.ago", :time => time_ago_in_words(@question.created_at))
        - if @question.updated_by
          ,
          = t('global.edited_by')
          = render :partial => "users/user_mini", :locals => {:user => @question.updated_by}

          %time{:datetime => @question.updated_at.iso8601, :itemprop => "dateModified"}
            = link_to t("time.ago", :time => time_ago_in_words(@question.updated_at)), history_question_path(@question), :title => t("questions.show.history")+" (#{@question.versions_count})"

    -#.description.markdown.clearfix
      %div{:itemprop => "articleBody"}
        = question_body
      = render "reward_info"
      = render "attachments", :question => @question, :attachments => @question.attachments, :editing => false

    %meta{:itemprop=>"keywords", :content=>@question.tags.join(",")}
    %meta{:itemprop=>"inLanguage", :content=>@question.language}
    %meta{:itemprop=>"interactionCount", :content=>"UserComments:#{@question.answers_count}"}
    %meta{:itemprop=>"interactionCount", :content=>"UserPageVisits:#{@question.views_count}"}

    -#= render "toolbar"

    -#.comments
      -@question.comments.each do |comment|
        -read = (@last_read_at && @last_read_at > comment.created_at && comment.votes_average < 2)
        = render :partial => "comments/comment", :object => comment, :locals => {:source => question_path(@question), :mini => true, :read => read}

      .panel-comments
        = form_for [@question, @comment ||= Comment.new], html: {class: "question_comment_form", data: {commentable: @question.id, editor: current_group.wysiwyg_editor ? 'wysiwyg_editor' : 'markdown_editor'}} do |f|
          %fieldset
            = render :partial => "comments/form", :locals => {:f => f, :commentable => @question, :source => question_url(@question)}
            .buttons
              = submit_tag t("comments.shared.comment_submit")
              = t("global.or")
              = link_to t('scaffold.cancel'), '', :class => 'cancel cancel_comment'



#answers-content-wrap
  .error
    - source = question_path(@question)
    = error_messages_for 'answer'

  - if @question.closed && @question.close_reason.present?
    #close_reason
      = t(".close_reason")
      = t(@question.close_reason.reason, :scope=>"close_requests.form")
      - if !@question.close_reason.comment.empty?

        .comment
          =find_and_preserve(ace_auto_link(@question.close_reason.comment))
  - if !@answers.empty? || @question.accepted
    -cache_for(:question_answers, @question.id) do
      #answers-header
        .subheader.answers-subheader
          %h2= t("questions.question.has_answers", :count => @question.answers_count)
          #answer-tabs
            %a(title="Show newest answers first") newest
            %a(title="Show oldest answers first") oldest
            %a.youarehere(title="Sort answers by votes") votes

      -#.filters.clearfix
        %ul.menubar{:class => @active_subtab.to_s}
          %li
            %label=t('global.sort_by')
          %li.newest-active
            = link_to t("questions.index.newest"), question_path(@question, :sort=>"newest", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
          %li.votes-active
            = link_to t("questions.index.votes"), question_path(@question, :sort=>"votes", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
          %li.oldest-active
            = link_to t("questions.index.oldest"), question_path(@question, :sort=>"oldest", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
          %li
            = link_to t('.solution')

        -if @question.follow_up
          .followUp-content
            %h1
              = t("questions.show.follow_up_of")
            = link_to @question.follow_up.original_question.title, question_path(@question.follow_up.original_question)+"##{@question.follow_up.original_answer_id}", "rel" => 'nofollow'

        -if @question.followed_up_by.limit(1).count > 0
          %h1= t('global.followed_by')
          %ul
            -@question.followed_up_by.all.each do |child|
              %li
                = link_to child.title, question_path(child)

  - if !@answers.empty? || @question.accepted
    .answers-list
      - if @question.accepted
        - solution = @question.answer
        = render :partial=> "answer", :locals=> {:question => @question, :answer => solution} unless solution.nil?

      - @answers.each do |answer|
        - next if answer.id == @question.answer_id
        = render "answer", {:question => @question, :answer => answer}

      = paginate(@answers)

  - if !@question.closed || !(logged_in? && current_user.can_answer_on?(current_group))
    #to_answer
      -if logged_in? && @question.answers.where(user_id: current_user.id).count > 0
        %h2
        .toolbar
          %ul.menubar
            %li.action
              = link_to "Add another answer", "#", id: "add_another_answer"
      -else
        %h2
          -#i18n
          Your answer

      = render :partial => "answers/form", :locals => {:markdown => true, :question => @question}
