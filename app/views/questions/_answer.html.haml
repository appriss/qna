
-solution = question.accepted && question.answer_id == answer.id
-source = question_path(question)

-cache_for(:answers, question.id, answer.id, answer.user == current_user ? "owner" : "") do
  %article.answer{:class => " #{answer.id} #{solution && "solution"}", :item_scope => '', :itemtype => "http://schema.org/Article", :vote_url => question_answer_votes_path(answer.question, answer)}
    %a{:name => "answer#{answer.id}"}

    %table.answer-wrapper-table
      %tbody
        %tr
          %td.votecell
            .vote
              %center
                - vote_up_toggle = (logged_in? && (current_user.vote_on(answer) || 0) > 0) ? "vote-up-on" : "vote-up-off"
                - vote_down_toggle = (logged_in? && (current_user.vote_on(answer) || 0) < 0) ? "vote-down-on" : "vote-down-off"
                %a.vote-up{:class => vote_up_toggle}(title="This question shows research effort; it is useful and clear (click again to undo)") up vote
                %span.vote-count-post= answer.votes_average
                %a.vote-down{:class => vote_down_toggle}(title="This answer does not show any research effort; it is unclear or not useful (click again to undo)") down vote
                %span.vote-accepted-on(title="The question owner accepted this as the best answer") accepted
          %td.postcell
            %div
              .post-text.markdown.description= find_and_preserve(ace_auto_link(markdown(answer.body), :link_users => true))
              %table.fw
                %tbody
                  %tr
                    %td.vt
                      .post-menu
                        = link_to "edit", edit_question_answer_path(:id => answer.id, :question_id => question.id)
                        %span.lsep= "|"
                        = link_to "flag", new_question_answer_flag_path(:answer_id => answer.id, :question_id => question.id)
                        %span.lsep= "|"
                        = link_to "delete", [@question, answer], :method => :delete, :confirm => "Are you sure you want to delete this answer?"
                    %td.post-signature
                      .user-info
                        .user-action-time 
                          asked 
                          %span.relativetime= time_ago_in_words(answer.created_at)
                          ago
                        .user-gravatar32= avatar_img(answer.user, :size => "small")
                        .user-details
                          = pjax_link_to answer.user.display_name, "user", user_path(answer.user), {:class => "clear"}
                          %div.reputation-score(title="reputation score")= format_number(answer.user.reputation_on(current_group))
        %tr
          %td.votecell
          %td
            .comments
              %table
                %tbody
                  - answer.comments.each do |comment|
                    %tr.comment
                      %td.comment-actions
                        %table
                          %tbody
                            %tr
                              - comment_votes = comment.votes_average == 0 ? " " : comment.votes_average
                              %td.comment-score= comment_votes
                              %td &nbsp
                              -#%td
                                %a.comment-up(title="this comment adds something useful to the post") upvote
                            %tr
                              %td &nbsp
                              %td &nbsp
                              -#%a.comment-flag(title="flag this comment as unconstructive, offensive, or spam") flag
                      %td.comment-text
                        %div
                          %span.comment-copy= find_and_preserve(ace_auto_link(markdown(comment.body), :link_users => true))
                          â€“
                          %a.comment-user(href="#")= comment.user.display_name
                          %span.comment-date #{time_ago_in_words(comment.created_at)} ago
                %tfoot
                  %tr
                    %td
                    %td.comment-form
                      %a.comments-link(title="ask author for clarification about this post" onclick="$(this).hide(); $(\"form[data-commentable='#{answer.id}']\").show('fast');") add comment
                      = form_for [@question, answer, @comment ||= Comment.new], html: {style: "display: none", data: {commentable: answer.id}} do |f|
                        %table
                          %tbody
                            %tr
                              %td
                                = f.text_area :body, :cols => "68", :rows => "3"
                              %td
                                = f.submit

    -#= vote_box(answer, question_path(@question), @question.closed)

    -#%h4.author
      = avatar_img(answer.user, :size => "small") unless answer.user && answer.anonymous
      = render "questions/answered_by", local_assigns
      %time{ :datetime => answer.created_at.iso8601,  :itemprop=>"datePublished", :title => article_date(answer)}
        = link_to article_date(answer), question_answer_path(@question.id, answer.id), :itemprop => "url"
        - if answer.created_at != answer.updated_at
          = link_to edited_date(answer), history_question_answer_path(@question.id, answer.id), :title => t("questions.show.history")+" (#{answer.versions_count})"



    -#.content.markdown
      %div{:itemprop => "articleBody"}
        = find_and_preserve(ace_auto_link(markdown(answer.body), :link_users => true))

      -if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group)) && answer.flags.count > 0
        %h3
          = t(:flags, :scope => "activerecord.models")
          = render :partial => "flags/list", :locals => {:flaggeable => answer}

    -#= render "questions/answer_toolbar", :question => @question, :answer => answer, :solution => solution

    -#.comments
      = link_to "NN comments", "#", :class => "toggle_comments"
      -answer.comments.each do |comment|
        -read = (@last_read_at && @last_read_at > comment.created_at && comment.votes_average < 2)
        = render :partial => "comments/comment", :object => comment, :locals => {:source => source, :mini => true, :read => read}

    -#.panel-comments
      = form_for [@question, answer, @comment ||= Comment.new], html: {class: "answer_comment_form commentForm nestedAnswerForm addNestedAnswer", data: {commentable: answer.id, editor: current_group.wysiwyg_editor ? 'wysiwyg_editor' : 'markdown_editor'}} do |f|
        %fieldset
          = render :partial => "comments/form", :locals => {:f => f, :source => source, :commentable => answer }
          .buttons
            = submit_tag t("comments.shared.comment_submit")
            = t("global.or")
            = link_to t('scaffold.cancel'), '', :class => 'cancel cancel_comment'


    .article-forms
